(load "rbg.l")

(defmethod individual-demo ()
  (setf *fitness* #'fitness-r)
  (let* ((i0    (random-individual))
         (one   (rbg-string))
         (i1    (new-individual 1 one))
         (two   (rbg-string))
         (i2    (new-individual 2 two))
         (three (rbg-string))
         (i3    (new-individual 3 three))
         (i-val (list i0 i1 i2 i3))
         (i-sym '("i0" "i1" "i2" "i3")))
    (mapcar #'display i-val)
    (mapcar #'demo-individual-fitness i-val i-sym))
  nil)

(defmethod demo-individual-fitness ((i-val individual) (i-sym string))
  (format t "Fitness of ~A = ~A~%" i-sym (funcall *fitness* i-val)))
